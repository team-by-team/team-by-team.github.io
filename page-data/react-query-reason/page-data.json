{"componentChunkName":"component---src-templates-post-jsx","path":"/react-query-reason/","result":{"data":{"site":{"siteMetadata":{"title":"TEAM-BY-TEAM"}},"markdownRemark":{"id":"dde0edaf-b006-51f0-a50e-f47285556fc0","excerpt":"해당 글은 우아한테크코스 5기 팀바팀 크루 루루가 작성했습니다! React query 도입이유 react-query 사용을 고려하게된 이유 팀바팀의 핵심 기능인 캘린더는 등록,수정,삭제가 일어날 때 전체 일정과 개별 일정의 최신화가 보장되어야 함. 이후에 추가될 기능들 또한 최대한의 최신화가 보장되어야 함. 즉 서버,클라이언트 데이터를 분리하여 관리 할 …","html":"<blockquote>\n<p>해당 글은 우아한테크코스 5기 팀바팀 크루 <a href=\"https://github.com/hafnium1923\">루루</a>가 작성했습니다!</p>\n</blockquote>\n<h1>React query 도입이유</h1>\n<h3>react-query 사용을 고려하게된 이유</h3>\n<p>팀바팀의 핵심 기능인 캘린더는 등록,수정,삭제가 일어날 때 전체 일정과 개별 일정의 최신화가 보장되어야 함. 이후에 추가될 기능들 또한 최대한의 최신화가 보장되어야 함. 즉 서버,클라이언트 데이터를 분리하여 관리 할 수 있기 때문에 도입을 고려하게 됨. </p>\n<h3>react-query을 도입했을 때 장점</h3>\n<ul>\n<li>\n<p>캐싱</p>\n<ul>\n<li>\n<p>동일한 데이터를 여러번 요청하면 캐싱된 데이터를 가져오기 때문에 불필요한 통신을 줄일 수 있음.</p>\n<ul>\n<li>캘린더에서 달을 이동할 때 항상 전체 일정을 get한다. 전체 일정에서 개별 일정을 조회할 때마다 해당 일정을 get한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>get한 데이터에 대해 update를 진행하게 되면 자동으로 get을 수행한다.</p>\n<ul>\n<li>개별 일정에 대해 수정, 삭제를 하게되면 전체 일정 또한 invalidateQueries를 통해 쿼리가 오래되었다는 것을 알려주어 데이터를 가져오게 한다.</li>\n</ul>\n</li>\n<li>비동기 과정을 선언적으로 관리할 수 있다.</li>\n<li>서비스의 특성상 각각 기능별 페이지와 모아보기 페이지에서 데이터를 사용하는데 이 데이터를 저장하는 불필요한 전역 상태를 만들지 않아도 된다.</li>\n<li>react-query를 통해 성공, 에러, 로딩, 패칭 등 다양한 상태를 알 수 있기 때문에 간단하게 상황에 따라 맞는 UX/UI를 사용자에게 제공할 수 있다.</li>\n<li>\n<p>UX</p>\n<ul>\n<li>\n<p>협업을 위한 서비스 특성 상 서버 상태 동기화의 필요성이 높아짐</p>\n<ul>\n<li>react-query의 background refetch를 활용하여 사용자에게 서버의 최신 상태를 보여줄 수 있음</li>\n<li>refetchOnWindowFocus 등을 활용하여 탭 전환 / 윈도우 포커스 시 그동안 다른 사용자가 업데이트한 데이터를 보여줄 수 있음</li>\n</ul>\n</li>\n<li>Suspense, ErrorBoundary를 할용하여 선언적으로 비동기 로직의 로딩 / 에러 상태를 처리할 수 있음</li>\n<li>캐싱을 활용하여 불필요한 비동기 요청 횟수를 줄일 수 있음</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"팀바팀 React query 도입이유","date":"July 24, 2023","update":"July 24, 2023","tags":["frontend","react-query"],"series":null},"fields":{"slug":"/react-query-reason/","readingTime":{"minutes":3.005}}},"seriesList":{"edges":[{"node":{"id":"9b5cdcae-47e9-5839-9ed5-77d2bb13f063","fields":{"slug":"/event-storming/"},"frontmatter":{"title":"팀바팀 이벤트 스토밍(Event Storming) 도입기"}}},{"node":{"id":"cc7a0ab1-5503-5c29-aca6-5707103b16cd","fields":{"slug":"/local-date-time-binding/"},"frontmatter":{"title":"LocalDateTime 원하는 Format으로 바인딩하기 (feat.@DateTimeFormat, @JsonFormat)"}}},{"node":{"id":"df971529-c38c-5b99-8b34-e0d1f887ad8c","fields":{"slug":"/component-styling/"},"frontmatter":{"title":"팀바팀 컴포넌트 스타일링 방법 선택"}}},{"node":{"id":"bc022be2-f94e-5294-9b49-6fba751b5bfd","fields":{"slug":"/frontend-ci/"},"frontmatter":{"title":"프론트엔드 Github Action 테스트 자동화"}}},{"node":{"id":"fb6c635b-2fb9-5625-88bb-0c70f8e7543a","fields":{"slug":"/frontend-husky/"},"frontmatter":{"title":"프론트엔드 Husky 사용해서 commit 단위로 Lint 검사"}}},{"node":{"id":"dde0edaf-b006-51f0-a50e-f47285556fc0","fields":{"slug":"/react-query-reason/"},"frontmatter":{"title":"팀바팀 React query 도입이유"}}},{"node":{"id":"0bf82b69-7aee-5aa6-bb7e-8d973d2bc283","fields":{"slug":"/spring-event/"},"frontmatter":{"title":"스프링 이벤트를 사용하여 도메인 의존성 분리하기"}}},{"node":{"id":"b1a9ce77-e471-5b77-a2c6-5d3532cfc926","fields":{"slug":"/base64url/"},"frontmatter":{"title":"Base64와 Base64Url의 차이 및 구글 로그인 Trouble Shooting"}}}]},"previous":{"fields":{"slug":"/frontend-husky/"},"frontmatter":{"title":"프론트엔드 Husky 사용해서 commit 단위로 Lint 검사"}},"next":{"fields":{"slug":"/spring-event/"},"frontmatter":{"title":"스프링 이벤트를 사용하여 도메인 의존성 분리하기"}}},"pageContext":{"id":"dde0edaf-b006-51f0-a50e-f47285556fc0","series":null,"previousPostId":"fb6c635b-2fb9-5625-88bb-0c70f8e7543a","nextPostId":"0bf82b69-7aee-5aa6-bb7e-8d973d2bc283"}},"staticQueryHashes":[],"slicesMap":{}}