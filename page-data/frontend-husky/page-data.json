{"componentChunkName":"component---src-templates-post-jsx","path":"/frontend-husky/","result":{"data":{"site":{"siteMetadata":{"title":"TEAM-BY-TEAM"}},"markdownRemark":{"id":"fb6c635b-2fb9-5625-88bb-0c70f8e7543a","excerpt":"해당 글은 우아한테크코스 5기 팀바팀 크루 루루가 작성했습니다! Husky 사용해서 commit 단위로 Lint 검사(Git Desktop 오류코드 127) Husky란? husky는 commit 또는 push 할 때 lint에 맞는지 확인하고, 테스트를 실행하는 것에 사용할 수 있다. 팀마다 컨벤션이 다양할 텐데 인간이 코드를 작성하는지라 어쩔 수 없이…","html":"<blockquote>\n<p>해당 글은 우아한테크코스 5기 팀바팀 크루 <a href=\"https://github.com/hafnium1923\">루루</a>가 작성했습니다!</p>\n</blockquote>\n<h1>Husky 사용해서 commit 단위로 Lint 검사(Git Desktop 오류코드 127)</h1>\n<h2>Husky란?</h2>\n<p>husky는 commit 또는 push 할 때 lint에 맞는지 확인하고, 테스트를 실행하는 것에 사용할 수 있다.</p>\n<p>팀마다 컨벤션이 다양할 텐데 인간이 코드를 작성하는지라 어쩔 수 없이 컨벤션에 맞지않게 코드를 작성할 수도 있다.</p>\n<p>그럴때 husky를 사용하면 자동으로 검사해서 commit이든 push든 막아준다.</p>\n<p>팀바팀은 husky로 lint검사만 진행하는 것으로 결정했다.</p>\n<ol>\n<li>lint 검사는 commit 단위로 진행하는 것이 더 많은 수정을 막는다</li>\n<li>test를 commit단위로 진행하는 것은 필요없는 commit이 더 많기도 하고 전체 파일에서의 통과 여부가 더 중요하기 때문에 PR 단위로 진행한다.</li>\n</ol>\n<p>라는 이유였다!</p>\n<h3>Husky 설치하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i -d husky</code></pre></div>\n<p>명령어 넣기</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//package.json\n\"scripts\": {\n  ...\n    \"prepare\": \"cd .. &amp;&amp; husky install frontend/.husky &amp;&amp; cd frontend\"\n  },</code></pre></div>\n<p>우리는 하나의 레포에서 각각 백엔드 프론트엔드 파일을 만들어서 사용하고 있기 때문에 frontend 폴더로 이동하는 것도 추가했다</p>\n<h3>lint-staged 설치하기</h3>\n<p>lint-staged란 문법 오류나 스타일 오류를 분석하고 표시, 수정하는 도구이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i -d lint-staged</code></pre></div>\n<p>설치했으면 설정도 해주자</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//package.json\n\"lint-staged\": {\n    \"*.{ts,tsx}\": [\n      \"eslint --cache\"\n    ],\n    \"*.{ts,tsx,md,json}\": [\n      \"prettier --write\"\n    ]\n  }</code></pre></div>\n<p>각각 확장자로 끝나는 파일들을 어떤 거로 검사할건지 정해주는 거다.</p>\n<p>+) --cache는 캐싱해주는 옵션으로 한 파일만 고쳤는데 나머지 코드들이 의미없이 포맷팅되는 상황을 막아준다. 즉, 전과 후를 비교해 비교를 최소화해준다.</p>\n<h3>pre-commit 파일</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#!/bin/sh\n. \"$(dirname \"$0\")/_/husky.sh\"\n\ncd frontend\nnpx lint-staged</code></pre></div>\n<p>마찬가지로 프론트엔드 폴더로 이동 후 커맨드를 실행시키게 하자</p>\n<p>추가적으로 깃 데스크탑을 사용하면 조금 바뀐다.</p>\n<h2>Git Desktop에서 husky 오류</h2>\n<p>내가 깃 데탑을 써서 그런가, 아님 윈도우라 그런가, 아님 그 둘다라서 husky 억까를 당했다. storybook과 npm배포에 이어 또 억까.. 그냥 한달에 한번 환경억까당한다고 생각해야 마음 편할듯.</p>\n<p>커밋하려고 하니까 이런 에러가 떴다. (아래 가린건 신경안써도 된다) 근데 VScode에서는 commit이 아주아주 잘된다.</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/beyYO1/btsn6HDjKtq/u1sDGEqQV5vFj1lgkfzlkk/img.png\" alt=\"https://blog.kakaocdn.net/dn/beyYO1/btsn6HDjKtq/u1sDGEqQV5vFj1lgkfzlkk/img.png\"></p>\n<p>이거 두개 이슈 보면서 환경변수 추가했는데 안됐다.(추가하라는거 다 한듯?)</p>\n<p><a href=\"https://github.com/typicode/husky/issues/1038\">Code 127 error · Issue #1038 · typicode/husky\nTroubleshoot [ x ] Before creating an issue, please check: https://typicode.github.io/husky/#/?id=troubleshoot Context We had husky 7.0.1 working fine in our repo. But a few days ago it stopped wor...\ngithub.com</a></p>\n<p><a href=\"https://github.com/typicode/husky/issues/1072\">Win 10 Github Desktop pre-commit hook · Issue #1072 · typicode/husky\nHello, I have a problem with my pre-commit hook or husky in general when using Github Desktop. On the first look, it seems to be #1038, but the problem is. It works perfectly fine in VS code. My en...\ngithub.com</a></p>\n<h3>해결방법</h3>\n<p>진짜 간단하다.</p>\n<p>.husky\\pre-commit 에서 이렇게 하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#!/bin/sh\n. \"$(dirname \"$0\")/_/husky.sh\"\n\ncd frontend\nnpx.cmd lint-staged</code></pre></div>\n<p>npx  -> npx.cmd</p>\n<p>단, 이렇게 하면 맥에서는 아예 작동을 하지 않는다ㅋㅋ.. 그래서 나는 일단 브랜치에서 작업할 때마다 .cmd를 붙여주고있다.</p>\n<p>다른 방법 알면 알려주세요...</p>\n<p>끋!</p>","frontmatter":{"title":"프론트엔드 Husky 사용해서 commit 단위로 Lint 검사","date":"July 24, 2023","update":"July 24, 2023","tags":["frontend","test"],"series":null},"fields":{"slug":"/frontend-husky/","readingTime":{"minutes":4.405}}},"seriesList":{"edges":[{"node":{"id":"9b5cdcae-47e9-5839-9ed5-77d2bb13f063","fields":{"slug":"/event-storming/"},"frontmatter":{"title":"팀바팀 이벤트 스토밍(Event Storming) 도입기"}}},{"node":{"id":"cc7a0ab1-5503-5c29-aca6-5707103b16cd","fields":{"slug":"/local-date-time-binding/"},"frontmatter":{"title":"LocalDateTime 원하는 Format으로 바인딩하기 (feat.@DateTimeFormat, @JsonFormat)"}}},{"node":{"id":"df971529-c38c-5b99-8b34-e0d1f887ad8c","fields":{"slug":"/component-styling/"},"frontmatter":{"title":"팀바팀 컴포넌트 스타일링 방법 선택"}}},{"node":{"id":"bc022be2-f94e-5294-9b49-6fba751b5bfd","fields":{"slug":"/frontend-ci/"},"frontmatter":{"title":"프론트엔드 Github Action 테스트 자동화"}}},{"node":{"id":"fb6c635b-2fb9-5625-88bb-0c70f8e7543a","fields":{"slug":"/frontend-husky/"},"frontmatter":{"title":"프론트엔드 Husky 사용해서 commit 단위로 Lint 검사"}}},{"node":{"id":"dde0edaf-b006-51f0-a50e-f47285556fc0","fields":{"slug":"/react-query-reason/"},"frontmatter":{"title":"팀바팀 React query 도입이유"}}},{"node":{"id":"0bf82b69-7aee-5aa6-bb7e-8d973d2bc283","fields":{"slug":"/spring-event/"},"frontmatter":{"title":"스프링 이벤트를 사용하여 도메인 의존성 분리하기"}}}]},"previous":{"fields":{"slug":"/frontend-ci/"},"frontmatter":{"title":"프론트엔드 Github Action 테스트 자동화"}},"next":{"fields":{"slug":"/react-query-reason/"},"frontmatter":{"title":"팀바팀 React query 도입이유"}}},"pageContext":{"id":"fb6c635b-2fb9-5625-88bb-0c70f8e7543a","series":null,"previousPostId":"bc022be2-f94e-5294-9b49-6fba751b5bfd","nextPostId":"dde0edaf-b006-51f0-a50e-f47285556fc0"}},"staticQueryHashes":[],"slicesMap":{}}