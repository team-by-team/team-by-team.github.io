{"componentChunkName":"component---src-templates-post-jsx","path":"/local-date-time-binding/","result":{"data":{"site":{"siteMetadata":{"title":"TEAM-BY-TEAM"}},"markdownRemark":{"id":"cc7a0ab1-5503-5c29-aca6-5707103b16cd","excerpt":"해당 글은 우아한테크코스 5기 팀바팀 크루 성하가 작성했습니다! 📘 0. 일정 등록 API Request Body API 명세를 정할 당시에는 LocalDateTime이 요청으로 들어왔을 때 어떻게 Request Dto의 필드로 바인딩되는지 감이 안 잡혔습니다. 그래서 우선 API 명세를 확정한 이후에 부딪혀보자! 라고 마음을 다잡고 명세를 정했었습니다.…","html":"<blockquote>\n<p>해당 글은 우아한테크코스 5기 팀바팀 크루 <a href=\"https://github.com/sh111-coder\">성하</a>가 작성했습니다!</p>\n</blockquote>\n<h2>📘 0. 일정 등록 API Request Body</h2>\n<p>API 명세를 정할 당시에는</p>\n<p>LocalDateTime이 요청으로 들어왔을 때 어떻게 Request Dto의 필드로 바인딩되는지 감이 안 잡혔습니다.</p>\n<p>그래서 우선 API 명세를 확정한 이후에 부딪혀보자! 라고 마음을 다잡고 명세를 정했었습니다.</p>\n<p>그렇게 일정 등록 API 명세가 확정된 채로, 일정 등록 API를 구현하게 됐습니다.</p>\n<p>확정된 일정 등록 API의 Request Body는 다음과 같았습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"httprequest\"><pre class=\"language-httprequest\"><code class=\"language-httprequest\">{\n    &quot;title&quot;: &quot;4차 데모데이 회의 (아무것도 구현안함)&quot;,\n    &quot;startDateTime&quot;: &quot;2023-07-13 14:00&quot;,\n    &quot;endDateTime&quot;: &quot;2023-07-14 15:59&quot;\n}</code></pre></div>\n<p>startDateTime과 endDateTime을 LocalDateTime으로 바인딩할 때 공부한 내용을 공유하겠습니다! ✌🏻</p>\n<h2>❌ 1. 문제 상황</h2>\n<p>Request로 오는 String의 날짜 형식을 LocalDateTime에 어떻게 바인딩할지 찾아보니,</p>\n<p>@DateTimeFormat을 사용하여 Request Dto 필드의 형식을 지정할 수 있었습니다.</p>\n<p>그래서 다음과 같이 Request Dto를 생성하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">ScheduleRegisterRequest</span><span class=\"token punctuation\">(</span>\n\n        <span class=\"token annotation punctuation\">@NotBlank</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"제목은 빈 값일 수 없습니다.\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">,</span>\n\n        <span class=\"token annotation punctuation\">@DateTimeFormat</span><span class=\"token punctuation\">(</span>pattern <span class=\"token operator\">=</span> <span class=\"token string\">\"yyyy-MM-dd HH:mm\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token class-name\">LocalDateTime</span> startDateTime<span class=\"token punctuation\">,</span>\n\n        <span class=\"token annotation punctuation\">@DateTimeFormat</span><span class=\"token punctuation\">(</span>pattern <span class=\"token operator\">=</span> <span class=\"token string\">\"yyyy-MM-dd HH:mm\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token class-name\">LocalDateTime</span> endDateTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그 후, 객체가 잘 바인딩이 되는지 API 테스트를 진행했습니다.</p>\n<p>결과는, 다음과 같이 에러가 발생했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">.</span></span>DateTimeParseException</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Text</span> '<span class=\"token number\">2023</span><span class=\"token operator\">-</span><span class=\"token number\">07</span><span class=\"token operator\">-</span><span class=\"token number\">13</span> <span class=\"token number\">14</span><span class=\"token operator\">:</span><span class=\"token number\">00</span>' could not be parsed at index <span class=\"token number\">10</span>\n\tat java<span class=\"token punctuation\">.</span>base<span class=\"token operator\">/</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">.</span></span>DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseResolved0</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">2052</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">[</span>na<span class=\"token operator\">:</span>na<span class=\"token punctuation\">]</span>\n\tat java<span class=\"token punctuation\">.</span>base<span class=\"token operator\">/</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">.</span></span>DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">1954</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">[</span>na<span class=\"token operator\">:</span>na<span class=\"token punctuation\">]</span>\n\tat java<span class=\"token punctuation\">.</span>base<span class=\"token operator\">/</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span></span>LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">494</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">[</span>na<span class=\"token operator\">:</span>na<span class=\"token punctuation\">]</span>\n\tat <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>datatype<span class=\"token punctuation\">.</span>jsr310<span class=\"token punctuation\">.</span>deser<span class=\"token punctuation\">.</span></span>LocalDateTimeDeserializer</span><span class=\"token punctuation\">.</span><span class=\"token function\">_fromString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTimeDeserializer</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">177</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">[</span>jackson<span class=\"token operator\">-</span>datatype<span class=\"token operator\">-</span>jsr310<span class=\"token operator\">-</span><span class=\"token number\">2.15</span><span class=\"token number\">.2</span><span class=\"token punctuation\">.</span>jar<span class=\"token operator\">:</span><span class=\"token number\">2.15</span><span class=\"token number\">.2</span><span class=\"token punctuation\">]</span>\n\tat <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>datatype<span class=\"token punctuation\">.</span>jsr310<span class=\"token punctuation\">.</span>deser<span class=\"token punctuation\">.</span></span>LocalDateTimeDeserializer</span><span class=\"token punctuation\">.</span><span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTimeDeserializer</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">81</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">[</span>jackson<span class=\"token operator\">-</span>datatype<span class=\"token operator\">-</span>jsr310<span class=\"token operator\">-</span><span class=\"token number\">2.15</span><span class=\"token number\">.2</span><span class=\"token punctuation\">.</span>jar<span class=\"token operator\">:</span><span class=\"token number\">2.15</span><span class=\"token number\">.2</span><span class=\"token punctuation\">]</span>\n\tat <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>datatype<span class=\"token punctuation\">.</span>jsr310<span class=\"token punctuation\">.</span>deser<span class=\"token punctuation\">.</span></span>LocalDateTimeDeserializer</span><span class=\"token punctuation\">.</span><span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTimeDeserializer</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">[</span>jackson<span class=\"token operator\">-</span>datatype<span class=\"token operator\">-</span>jsr310<span class=\"token operator\">-</span><span class=\"token number\">2.15</span><span class=\"token number\">.2</span><span class=\"token punctuation\">.</span>jar<span class=\"token operator\">:</span><span class=\"token number\">2.15</span><span class=\"token number\">.2</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>에러 로그를 보면, String으로 들어온 '2023-07-13 14:00' 데이터 바인딩 시 오류가 난 것을 확인할 수 있었습니다.</p>\n<h2>🔮 2. @JsonFormat으로 해결</h2>\n<p>결과적으로, <strong>@DateTimeFormat</strong> 대신 <strong>@JsonFormat</strong>을 사용하여 해결할 수 있었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">ScheduleRegisterRequest</span><span class=\"token punctuation\">(</span>\n        <span class=\"token annotation punctuation\">@NotBlank</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"제목은 빈 값일 수 없습니다.\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">,</span>\n\n        <span class=\"token annotation punctuation\">@JsonFormat</span><span class=\"token punctuation\">(</span>shape <span class=\"token operator\">=</span> <span class=\"token class-name\">JsonFormat<span class=\"token punctuation\">.</span>Shape</span><span class=\"token punctuation\">.</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">,</span> pattern <span class=\"token operator\">=</span> <span class=\"token string\">\"yyyy-MM-dd HH:mm\"</span><span class=\"token punctuation\">,</span> timezone <span class=\"token operator\">=</span> <span class=\"token string\">\"Asia/Seoul\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token class-name\">LocalDateTime</span> startDateTime<span class=\"token punctuation\">,</span>\n\n        <span class=\"token annotation punctuation\">@JsonFormat</span><span class=\"token punctuation\">(</span>shape <span class=\"token operator\">=</span> <span class=\"token class-name\">JsonFormat<span class=\"token punctuation\">.</span>Shape</span><span class=\"token punctuation\">.</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">,</span> pattern <span class=\"token operator\">=</span> <span class=\"token string\">\"yyyy-MM-dd HH:mm\"</span><span class=\"token punctuation\">,</span> timezone <span class=\"token operator\">=</span> <span class=\"token string\">\"Asia/Seoul\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token class-name\">LocalDateTime</span> endDateTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그렇다면, 왜 @DateTimeFormat 대신 @JsonFormat을 사용해야 했을까요?</p>\n<p>두 어노테이션을 간단히 살펴봅시다.</p>\n<h2>✅ 3. @DateTimeFormat VS @JsonFormat</h2>\n<p>먼저 @DateTimeFormat을 살펴보면 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">.</span>annotation</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">DateTimeFormat</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>패키지에서 볼 수 있듯이 <strong>@DateTimeFormat</strong>은 Spring의 어노테이션입니다.</p>\n<p>그럼, <strong>@JsonFormat</strong>을 살펴볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>annotation</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">JsonFormat</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>패키지를 보면 <strong>@JsonFormat</strong>은 @RequestBody, @ResponseBody를 사용한 직렬화/역직렬화를 담당하는</p>\n<p>Jackson 라이브러리의 어노테이션입니다.</p>\n<p>Jackson 라이브러리에서는 내부적으로 pattern으로 지정한 형식을 LocalDateTime으로 변환해줍니다.</p>\n<p>따라서, Jackson 라이브러리의 @JsonFormat은 날짜 형식이라면 자유롭게 사용이 가능합니다.</p>\n<p>하지만, @RequestBody, @ResponseBody를 사용한 역직렬화/직렬화 시</p>\n<p>@DateTimeFormat을 사용하려면 Jackson 라이브러리에 있는 어노테이션이 아니기 때문에</p>\n<p>LocalDateTime의 기본 형식인 'yyyy-MM-dd'T'HH:mm:ss'으로 요청이 들어와야 바인딩됩니다.</p>\n<p>(이때, @DateTimeFormat을 사용하지 않아도 바인딩이 됩니다.)</p>\n<h2>❓ 4. @RequestParam, @ModelAttribute에서는 무엇을 사용해야 할까?</h2>\n<p>위에서 설명한 상황은 @RequestBody, @ResponseBody 등</p>\n<p>Jackson 라이브러리를 사용하여 역직렬화/직렬화를 하는 상황이었습니다.</p>\n<p>그렇다면, Jackson 라이브러리가 관여하지 않는 @RequestParam, @ModelAttribute에서는 무엇을 사용해야 할까요?</p>\n<p>Jackson 라이브러리가 사용되지 않기 때문에 <strong>@JsonFormat은 무시되게 됩니다.</strong></p>\n<p><strong>따라서, @DateTimeFormat을 사용하여 날짜 형식을 자유롭게 바인딩 할 수 있습니다.</strong></p>\n<h2>🎯 5. 결론</h2>\n<p>따라서, 결론적으로 @RequestBody, @ResponseBody를 사용한 역직렬화/직렬화 시</p>\n<p>날짜 형식을 자유롭게 사용하기 위해서는</p>\n<p><strong>@DateTimeFormat이 아닌, @JsonFormat을 사용해야합니다.</strong></p>\n<p>@RequestBody, @ResponseBody를 사용한 역직렬화/직렬화 시에 Jackson 라이브러리를 사용하여 날짜를 변환하기 때문에,</p>\n<p><strong>Jackson 라이브러리의 어노테이션인 @JsonFormat</strong>을 사용해야 함을 알 수 있었습니다.</p>\n<p>(물론, Request Body 날짜 형식이 LocalDateTime의 기본 형식인  'yyyy-MM-dd'T'HH:mm:ss'이라면</p>\n<p>@DateTimeFormat, @JsonFormat 둘다 사용하지 않아도 그대로 바인딩이 가능합니다.)</p>\n<p>반대로, Jackson 라이브러리가 사용되지 않는</p>\n<p>@RequestBody, @ResponseBody의 경우에는 @DateTimeFormat을 사용해야 함을 알 수 있었습니다.</p>\n<p>위의 결론을 요약하면 다음과 같습니다!</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token operator\">*</span> 기본 전제 <span class=\"token operator\">:</span> <span class=\"token class-name\">LocalDateTime</span>의 기본 형식인 'yyyy<span class=\"token operator\">-</span><span class=\"token constant\">MM</span><span class=\"token operator\">-</span>dd<span class=\"token char\">'T'</span><span class=\"token constant\">HH</span><span class=\"token operator\">:</span>mm<span class=\"token operator\">:</span>ss'이 아닐 때\n\n<span class=\"token number\">1.</span> <span class=\"token annotation punctuation\">@RequestBody</span><span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@ResponseBody</span> <span class=\"token operator\">:</span> <span class=\"token annotation punctuation\">@JsonFormat</span> 사용\n<span class=\"token number\">2.</span> <span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@ModelAttribute</span> <span class=\"token operator\">:</span> <span class=\"token annotation punctuation\">@DateTimeFormat</span> 사용</code></pre></div>\n<hr>\n<h4>Reference</h4>\n<p><a href=\"https://swampwar.github.io/2020/03/19/LocalDateTime-%EB%B3%80%EC%88%98%EB%B0%94%EC%9D%B8%EB%94%A9.html\">Controller 메서드에서 LocalDateTime 타입의 변수 바인딩 받기</a>\n<a href=\"https://jojoldu.tistory.com/361\">SpringBoot에서 날짜 타입 JSON 변환에 대한 오해 풀기</a></p>","frontmatter":{"title":"LocalDateTime 원하는 Format으로 바인딩하기 (feat.@DateTimeFormat, @JsonFormat)","date":"July 01, 2023","update":"July 01, 2023","tags":["Spring","LocalDateTime"],"series":null},"fields":{"slug":"/local-date-time-binding/","readingTime":{"minutes":6.2}}},"seriesList":{"edges":[{"node":{"id":"9b5cdcae-47e9-5839-9ed5-77d2bb13f063","fields":{"slug":"/event-storming/"},"frontmatter":{"title":"팀바팀 이벤트 스토밍(Event Storming) 도입기"}}},{"node":{"id":"cc7a0ab1-5503-5c29-aca6-5707103b16cd","fields":{"slug":"/local-date-time-binding/"},"frontmatter":{"title":"LocalDateTime 원하는 Format으로 바인딩하기 (feat.@DateTimeFormat, @JsonFormat)"}}},{"node":{"id":"df971529-c38c-5b99-8b34-e0d1f887ad8c","fields":{"slug":"/component-styling/"},"frontmatter":{"title":"팀바팀 컴포넌트 스타일링 방법 선택"}}},{"node":{"id":"fb6c635b-2fb9-5625-88bb-0c70f8e7543a","fields":{"slug":"/frontend-husky/"},"frontmatter":{"title":"프론트엔드 Husky 사용해서 commit 단위로 Lint 검사"}}},{"node":{"id":"bc022be2-f94e-5294-9b49-6fba751b5bfd","fields":{"slug":"/frontend-ci/"},"frontmatter":{"title":"프론트엔드 Github Action 테스트 자동화"}}},{"node":{"id":"dde0edaf-b006-51f0-a50e-f47285556fc0","fields":{"slug":"/react-query-reason/"},"frontmatter":{"title":"팀바팀 React query 도입이유"}}},{"node":{"id":"0bf82b69-7aee-5aa6-bb7e-8d973d2bc283","fields":{"slug":"/spring-event/"},"frontmatter":{"title":"스프링 이벤트를 사용하여 도메인 의존성 분리하기"}}},{"node":{"id":"b1a9ce77-e471-5b77-a2c6-5d3532cfc926","fields":{"slug":"/base64url/"},"frontmatter":{"title":"Base64와 Base64Url의 차이 및 구글 로그인 Trouble Shooting"}}}]},"previous":{"fields":{"slug":"/event-storming/"},"frontmatter":{"title":"팀바팀 이벤트 스토밍(Event Storming) 도입기"}},"next":{"fields":{"slug":"/component-styling/"},"frontmatter":{"title":"팀바팀 컴포넌트 스타일링 방법 선택"}}},"pageContext":{"id":"cc7a0ab1-5503-5c29-aca6-5707103b16cd","series":null,"previousPostId":"9b5cdcae-47e9-5839-9ed5-77d2bb13f063","nextPostId":"df971529-c38c-5b99-8b34-e0d1f887ad8c"}},"staticQueryHashes":[],"slicesMap":{}}